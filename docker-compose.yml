version: '3'
services:
   proxy:
      image: 'traefik:v2.0'
      container_name: proxy-server
      command: '--api.insecure=true --providers.docker'
      ports:
         - '80:80'
         - '8080:8080'
      volumes:
         - '/var/run/docker.sock:/var/run/docker.sock'
      networks:
         - backend
   web:
      build: ./web
      container_name: web-c
      restart: always
      volumes:
         - './web:/src'
      labels:
         - traefik.enable=true
         - traefik.http.routers.web.rule=Host(`web.docker.localhost`)
         - traefik.http.services.web.loadbalancer.server.port=3000
      expose:
         - 3000
      networks:
         - backend
   tensorflow:
      build: ./tensorflow
      container_name: tensorflow-c
      volumes:
         - './tensorflow/models/tmp:/serving/model'
      labels:
         - traefik.enable=true
         - traefik.http.services.tensorflow.loadbalancer.server.port=8501
         - traefik.http.routers.tensorflow.rule=Host(`tensorflow.docker.localhost`)
      expose:
         - 8501
      networks:
         - backend
   flask:
      build: ./flask
      container_name: flask-c
      restart: always
      volumes:
         - './flask:/api'
      labels:
         - traefik.enable=true
         - traefik.http.services.flask.loadbalancer.server.port=8080
         - 'traefik.http.routers.flask.rule=Host(`web.docker.localhost`) && PathPrefix(`/api`)'
      expose:
         - 8080
      networks:
         - backend
networks:
   backend:
      driver: bridge
